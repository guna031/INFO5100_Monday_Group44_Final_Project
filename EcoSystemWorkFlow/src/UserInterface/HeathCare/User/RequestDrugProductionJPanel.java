/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.HeathCare.User;

import UserInterface.HeathCare.*;
import ecosystemworkflow.EcoSystem;
import ecosystemworkflow.Enterprise.Enterprise;
import ecosystemworkflow.Enterprise.PharmaceuticalEnterprise;
import ecosystemworkflow.Network.Network;
import ecosystemworkflow.Organization.DrugProductionOrganization;
import ecosystemworkflow.Organization.HospitalAdministrationOrganization;
import ecosystemworkflow.Organization.Organization;
import static ecosystemworkflow.Organization.Organization.OrganizationType.DrugProductionOrganization;
import static ecosystemworkflow.Organization.Organization.OrganizationType.HospitalAdministrationOrganization;
import ecosystemworkflow.UserAccount.UserAccount;
import ecosystemworkflow.WorkFlow.DrugProductionRequest;
import java.awt.CardLayout;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author gunav
 */
public class RequestDrugProductionJPanel extends javax.swing.JPanel {

    private UserAccount userAccount;
    private Organization organization;
    private Enterprise enterprise;
    private EcoSystem system;
    private JPanel container;

    /**
     * Creates new form RequestDrugProductionJPanel
     */
    public RequestDrugProductionJPanel(JPanel container, UserAccount account,
            Organization organization, Enterprise enterprise, EcoSystem system) {

        initComponents();
        this.container = container;
        this.userAccount = account;
        this.organization = organization;
        this.enterprise = enterprise;
        this.system = system;
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        model.addElement("Normal");
        model.addElement("Urgent");
        model.addElement("Emergency");
        cmbPriority.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        labelDrugName = new javax.swing.JLabel();
        txtDrugName = new javax.swing.JTextField();
        labelQuantity = new javax.swing.JLabel();
        txtQuantity = new javax.swing.JTextField();
        lblStatus = new javax.swing.JLabel();
        cmbPriority = new javax.swing.JComboBox<>();
        buttonViewReq = new javax.swing.JButton();
        buttonSubmit = new javax.swing.JButton();

        labelDrugName.setText("Drug Name");

        txtDrugName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDrugNameActionPerformed(evt);
            }
        });

        labelQuantity.setText("Quantity");

        txtQuantity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtQuantityActionPerformed(evt);
            }
        });

        lblStatus.setText("Priority");

        cmbPriority.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        buttonViewReq.setText("View Requests");
        buttonViewReq.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonViewReqActionPerformed(evt);
            }
        });

        buttonSubmit.setText("Submit Request");
        buttonSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSubmitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(242, 242, 242)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelQuantity)
                        .addGap(18, 18, 18)
                        .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(labelDrugName)
                        .addGap(18, 18, 18)
                        .addComponent(txtDrugName, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(lblStatus)
                        .addGap(18, 18, 18)
                        .addComponent(cmbPriority, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(buttonViewReq)
                        .addComponent(buttonSubmit, javax.swing.GroupLayout.PREFERRED_SIZE, 114, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(355, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(104, 104, 104)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelDrugName)
                    .addComponent(txtDrugName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labelQuantity)
                    .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbPriority, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblStatus))
                .addGap(41, 41, 41)
                .addComponent(buttonSubmit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(buttonViewReq)
                .addContainerGap(223, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtDrugNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDrugNameActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtDrugNameActionPerformed

    private void txtQuantityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtQuantityActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtQuantityActionPerformed

    private void buttonViewReqActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonViewReqActionPerformed
        ViewDrugRequestsJPanel viewPanel = new ViewDrugRequestsJPanel(container, userAccount, 
            organization, enterprise, system);
        container.add("ViewDrugRequests", viewPanel);
        CardLayout layout = (CardLayout) container.getLayout();
        layout.next(container);
    }//GEN-LAST:event_buttonViewReqActionPerformed

    private void buttonSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSubmitActionPerformed
//        try {
//            String drugName = txtDrugName.getText().trim();
//            String quantity = txtQuantity.getText().trim();
//            String priority = cmbPriority.getSelectedItem().toString();
//
//            if (drugName.isEmpty() || quantity.isEmpty()) {
//                JOptionPane.showMessageDialog(this, "Please fill all fields");
//                return;
//            }
//
//            int qty = Integer.parseInt(quantity);
//            if (qty <= 0) {
//                JOptionPane.showMessageDialog(this, "Quantity must be greater than 0");
//                return;
//            }
//
//            Enterprise pharmaEnterprise = findPharmaceuticalEnterprise();
//            if (pharmaEnterprise != null) {
//                DrugProductionRequest request = createDrugRequest(
//                        drugName, qty, priority, pharmaEnterprise);
//
//                if (request != null) {
//                    JOptionPane.showMessageDialog(this, "Drug request created successfully!");
//                    clearForm();
//                }
//            }
//
//        } catch (NumberFormatException e) {
//            JOptionPane.showMessageDialog(this, "Please enter valid quantity");
//        } catch (Exception e) {
//            JOptionPane.showMessageDialog(this, "Error: " + e.getMessage());
//        }

    }//GEN-LAST:event_buttonSubmitActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonSubmit;
    private javax.swing.JButton buttonViewReq;
    private javax.swing.JComboBox<String> cmbPriority;
    private javax.swing.JLabel labelDrugName;
    private javax.swing.JLabel labelQuantity;
    private javax.swing.JLabel lblStatus;
    private javax.swing.JTextField txtDrugName;
    private javax.swing.JTextField txtQuantity;
    // End of variables declaration//GEN-END:variables

//    private DrugProductionRequest createDrugRequest(String drugName, int quantity,
//            String urgency, Enterprise pharmaEnterprise) throws Exception {
//
//        DrugProductionOrganization drugProductionOrg = findDrugProductionOrg(pharmaEnterprise);
//        if (drugProductionOrg == null) {
//            throw new Exception("Drug Production Organization not found");
//        }
//
//        UserAccount receiverAccount = findReceiver(drugProductionOrg);
//        if (receiverAccount == null) {
//            throw new Exception("No eligible receiver found");
//        }
//
//        DrugProductionRequest request = new DrugProductionRequest(
//                "Request for " + quantity + " units of " + drugName,
//                userAccount,
//                receiverAccount,
//                drugName,
//                quantity
//        );
//        request.setStatus("Pending");
//        request.setUrgency(urgency);
//
//        organization.getWorkRequestList().addWorkRequest(request);
//        drugProductionOrg.getWorkRequestList().addWorkRequest(request);
//
//        return request;
//    }
//
//    private Enterprise findPharmaceuticalEnterprise() {
//        for (Network network : system.getNetworks()) {
//            for (Enterprise ent : network.getEnterprises().getEnterpriseList()) {
//                if (ent instanceof PharmaceuticalEnterprise) {
//                    return ent;
//                }
//            }
//        }
//        return null;
//    }
//
//    private DrugProductionOrganization findDrugProductionOrg(Enterprise pharmaEnterprise) {
//        for (Organization org : pharmaEnterprise.getOrganizationDirectory().getOrganizations()) {
//            if (org instanceof DrugProductionOrganization) {
//                return (DrugProductionOrganization) org;
//            }
//        }
//        return null;
//    }

    private UserAccount findReceiver(DrugProductionOrganization drugProductionOrg) {
        for (UserAccount account : drugProductionOrg.getUserAccountDirectory().getUserAccountList()) {
            if (account.getRole().toString().equals("Production Manager")) {
                return account;
            }
        }
        return null;
    }

    private void clearForm() {
        txtDrugName.setText("");
        txtQuantity.setText("");
        cmbPriority.setSelectedIndex(0);
    }
}
