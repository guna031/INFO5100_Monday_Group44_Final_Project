/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.HealthCare.User.Blood;

import ecosystemworkflow.Enterprise.Enterprise;
import ecosystemworkflow.Organization.BloodProcessingAndStorageOrganization;
import ecosystemworkflow.Organization.Organization;
import static ecosystemworkflow.Organization.Organization.OrganizationType.BloodProcessingAndStorageOrganization;
import ecosystemworkflow.UserAccount.UserAccount;
import ecosystemworkflow.WorkFlow.BloodSupplyRequest;
import java.util.Date;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;

/**
 *
 * @author gunav
 */
public class RequestBloodJPanel extends javax.swing.JPanel {

    /**
     * Creates new form RequestBloodJPanel
     */
     private UserAccount userAccount;
    private Organization organization;
    private JPanel container;
    private Enterprise enterprise;
    private com.toedter.calendar.JDateChooser dateChooser;

    
    public RequestBloodJPanel(JPanel container, UserAccount account, 
            Organization organization, Enterprise enterprise) {
        initComponents();
        this.container = container;
        this.userAccount = account;
        this.organization = organization;
        this.enterprise = enterprise;
        setupBloodTypeComboBox();
        setupPriorityComboBox();
    }
    
     private void setupBloodTypeComboBox() {
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        model.addElement("A+");
        model.addElement("A-");
        model.addElement("B+");
        model.addElement("B-");
        model.addElement("AB+");
        model.addElement("AB-");
        model.addElement("O+");
        model.addElement("O-");
        cmbBloodType.setModel(model);
    }
    
    private void setupPriorityComboBox() {
        DefaultComboBoxModel<String> model = new DefaultComboBoxModel<>();
        model.addElement("Normal");
        model.addElement("Urgent");
        model.addElement("Emergency");
        cmbPriority.setModel(model);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        cmbBloodType = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        cmbPriority = new javax.swing.JComboBox<>();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        buttonSubmit = new javax.swing.JButton();
        txtQuantity = new javax.swing.JTextField();
        chkUrgent = new javax.swing.JCheckBox();
        txtPatientCondition = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();

        cmbBloodType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel1.setText("Blood Type:");

        cmbPriority.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));

        jLabel2.setText("Priority");

        jLabel3.setText("Quantity");

        buttonSubmit.setText("submit");
        buttonSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonSubmitActionPerformed(evt);
            }
        });

        txtQuantity.setText("jTextField1");

        chkUrgent.setText("Urgent");
        chkUrgent.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                chkUrgentActionPerformed(evt);
            }
        });

        jLabel4.setText("Patient Condition");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(chkUrgent)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4))
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addGroup(layout.createSequentialGroup()
                            .addComponent(cmbBloodType, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addContainerGap(331, Short.MAX_VALUE))
                        .addComponent(txtPatientCondition, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createSequentialGroup()
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(txtQuantity)
                                .addComponent(cmbPriority, 0, 1, Short.MAX_VALUE))
                            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(buttonSubmit)
                        .addGap(315, 315, 315))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(141, 141, 141)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbBloodType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cmbPriority, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2))
                        .addGap(13, 13, 13)
                        .addComponent(txtPatientCondition, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(buttonSubmit)
                    .addComponent(chkUrgent))
                .addContainerGap(233, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void buttonSubmitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonSubmitActionPerformed
         if(txtQuantity.getText().isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please fill out all details");
            return;
        }
        
        try {
            String bloodType = (String) cmbBloodType.getSelectedItem();
            int quantity = Integer.parseInt(txtQuantity.getText());
            Date requiredDate = dateChooser.getDate();
            
            if(quantity <= 0) {
                JOptionPane.showMessageDialog(null, "Quantity must be greater than 0");
                return;
            }
            
            BloodSupplyRequest request = new BloodSupplyRequest();
            request.setMessage("Request for " + quantity + " units of " + bloodType + " blood");
            request.setSender(userAccount);
            request.setBloodType(bloodType);
            request.setQuantity(quantity);
            request.setIsUrgent(chkUrgent.isSelected());
            request.setDeliveryLocation(organization.getName());
            request.setRequiredByDate(requiredDate);
            request.setStatus("Pending");
            request.setTemperature(4.0);
            request.setStorageRequirements("Standard Blood Storage Protocol");
            
            if(txtPatientCondition.getText().trim().length() > 0) {
                request.setPatientCondition(txtPatientCondition.getText().trim());
            }
            
            Organization org = null;
            for(Organization organization : enterprise.getOrganizationDirectory().getOrganizations()) {
                if(organization instanceof BloodProcessingAndStorageOrganization) {
                    org = organization;
                    break;
                }
            }
            
            if(org != null && request.validateRequest()) {
                org.getWorkRequestList().addWorkRequest(request);
                userAccount.getWorkQueue().addWorkRequest(request);
                JOptionPane.showMessageDialog(null, "Blood request sent successfully");
                clearForm();
            }
            
        } catch(NumberFormatException e) {
            JOptionPane.showMessageDialog(null, "Please enter quantity in correct format");
        }
    }//GEN-LAST:event_buttonSubmitActionPerformed

    private void chkUrgentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_chkUrgentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_chkUrgentActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton buttonSubmit;
    private javax.swing.JCheckBox chkUrgent;
    private javax.swing.JComboBox<String> cmbBloodType;
    private javax.swing.JComboBox<String> cmbPriority;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JTextField txtPatientCondition;
    private javax.swing.JTextField txtQuantity;
    // End of variables declaration//GEN-END:variables


      private void clearForm() {
        txtQuantity.setText("");
        txtPatientCondition.setText("");
        cmbBloodType.setSelectedIndex(0);
        chkUrgent.setSelected(false);
        dateChooser.setDate(null);
    }
}
