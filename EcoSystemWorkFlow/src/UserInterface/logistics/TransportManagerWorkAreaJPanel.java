/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package UserInterface.logistics;

import ecosystemworkflow.EcoSystem;
import ecosystemworkflow.Enterprise.Enterprise;
import ecosystemworkflow.Organization.Organization;
import ecosystemworkflow.UserAccount.UserAccount;
import ecosystemworkflow.WorkFlow.DrugDeliveryConfirmationRequest;
import ecosystemworkflow.WorkFlow.DrugProductionRequest;
import ecosystemworkflow.WorkFlow.TransportOrganizationRequest;
import ecosystemworkflow.WorkFlow.WorkRequest;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author gunav
 */
public class TransportManagerWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form TransportManagerWorkAreaJPanel
     */
    private UserAccount userAccount;
    private Organization organization;
    private Enterprise enterprise;
    private EcoSystem system;
    private JPanel container;
    
    public TransportManagerWorkAreaJPanel(JPanel container, UserAccount account, 
            Organization organization, Enterprise enterprise, EcoSystem system) {
        initComponents();
        this.container = container;
        this.userAccount = account;
        this.organization = organization;
        this.enterprise = enterprise;
        this.system = system;
        populateTable();
    }
    
    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tblTransportRequests.getModel();
        model.setRowCount(0);
        
        for(WorkRequest request : organization.getWorkRequestList().getWorkRequests()) {
            if(request instanceof TransportOrganizationRequest) {
                TransportOrganizationRequest tr = (TransportOrganizationRequest) request;
                Object[] row = new Object[6];
                row[0] = tr;
                row[1] = tr.getItemType();
                row[2] = tr.getQuantity();
                row[3] = tr.getPriority();
                row[4] = tr.getStatus();
                row[5] = tr.getSender().getEmployee().getName();
                model.addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblTransportRequests = new javax.swing.JTable();
        btnProcess = new javax.swing.JButton();
        btnProcess1 = new javax.swing.JButton();
        btnProcess2 = new javax.swing.JButton();

        tblTransportRequests.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6"
            }
        ));
        jScrollPane1.setViewportView(tblTransportRequests);

        jScrollPane2.setViewportView(jScrollPane1);

        btnProcess.setText("Process Request");
        btnProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessActionPerformed(evt);
            }
        });

        btnProcess1.setText("Delivery");
        btnProcess1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcess1ActionPerformed(evt);
            }
        });

        btnProcess2.setText("Delivery");
        btnProcess2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcess2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(229, 229, 229)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 460, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(256, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnProcess)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnProcess1)
                .addGap(259, 259, 259))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(624, Short.MAX_VALUE)
                    .addComponent(btnProcess2)
                    .addGap(249, 249, 249)))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(124, 124, 124)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 128, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnProcess)
                    .addComponent(btnProcess1))
                .addContainerGap(257, Short.MAX_VALUE))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                    .addContainerGap(280, Short.MAX_VALUE)
                    .addComponent(btnProcess2)
                    .addGap(247, 247, 247)))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessActionPerformed
        // TODO add your handling code here:
        
        int selectedRow = tblTransportRequests.getSelectedRow();
        if(selectedRow < 0) {
            JOptionPane.showMessageDialog(this, "Please select a request");
            return;
        }
        
        TransportOrganizationRequest request = (TransportOrganizationRequest)
            tblTransportRequests.getValueAt(selectedRow, 0);
            
        Date pickupTime = new Date();
        Date deliveryTime = calculateDeliveryTime(request.getPriority());
        
        request.setPickupTime(pickupTime);
        request.setDeliveryTime(deliveryTime);
        request.setStatus("In Transit");
        
        populateTable();
        JOptionPane.showMessageDialog(this, "Delivery scheduled");
        
    }//GEN-LAST:event_btnProcessActionPerformed

    private void btnProcess1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcess1ActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblTransportRequests.getSelectedRow();
    if(selectedRow < 0) {
        JOptionPane.showMessageDialog(this, "Please select a request");
        return;
    }
    
    TransportOrganizationRequest request = (TransportOrganizationRequest)
        tblTransportRequests.getValueAt(selectedRow, 0);
        
    // Update transport request status
    request.setStatus("Delivered");
    request.setDateOfResolving(new Date());
    
    // Update original drug request status
    DrugProductionRequest originalRequest = findOriginalDrugRequest(request);
    if(originalRequest != null) {
        originalRequest.setStatus("Delivered to Hospital");
        
        // Update hospital's work queue
        UserAccount hospitalAdmin = originalRequest.getSender();
        if(hospitalAdmin != null && hospitalAdmin.getWorkQueue() != null) {
            // Create delivery confirmation request
            DrugDeliveryConfirmationRequest confirmRequest = new DrugDeliveryConfirmationRequest(
                "Drug delivery completed for " + request.getItemType(),
                userAccount,
                hospitalAdmin,
                request.getQuantity(),
                request.getItemType()
            );
            confirmRequest.setStatus("Delivered");
            hospitalAdmin.getWorkQueue().addWorkRequest(confirmRequest);
        }
    }
    
    populateTable();
    JOptionPane.showMessageDialog(this, "Delivery completed and hospital notified");
    }//GEN-LAST:event_btnProcess1ActionPerformed

    private void btnProcess2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcess2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_btnProcess2ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnProcess;
    private javax.swing.JButton btnProcess1;
    private javax.swing.JButton btnProcess2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblTransportRequests;
    // End of variables declaration//GEN-END:variables

    
    
    private Date calculateDeliveryTime(String priority) {
        Calendar cal = Calendar.getInstance();
        cal.setTime(new Date());
        
        switch(priority) {
            case "Emergency":
                cal.add(Calendar.HOUR, 4);
                break;
            case "Urgent":
                cal.add(Calendar.HOUR, 12);
                break;
            default: // Normal
                cal.add(Calendar.DAY_OF_MONTH, 1);
                break;
        }
        return cal.getTime();
    }
    
    private DrugProductionRequest findOriginalDrugRequest(TransportOrganizationRequest transportRequest) {
    for(WorkRequest wr : system.getWorkRequestList().getWorkRequests()) {
        if(wr instanceof DrugProductionRequest) {
            DrugProductionRequest dr = (DrugProductionRequest) wr;
            if(dr.getDrugName().equals(transportRequest.getItemType()) && 
               dr.getQuantity() == transportRequest.getQuantity()) {
                return dr;
            }
        }
    }
    return null;
}

}
