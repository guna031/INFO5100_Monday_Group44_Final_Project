/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.bloodSupply;

import ecosystemworkflow.Organization.Organization;
import ecosystemworkflow.UserAccount.UserAccount;
import ecosystemworkflow.WorkFlow.BloodSupplyRequest;
import ecosystemworkflow.WorkFlow.WorkRequest;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author gunav
 */
public class BloodBankManagerWorkAreaJPanel extends javax.swing.JPanel {

    /**
     * Creates new form BloodBankManagerWorkAreaJPanel
     */
    private UserAccount userAccount;
    private Organization organization;
    private JPanel container;
    
    public BloodBankManagerWorkAreaJPanel(JPanel container, UserAccount account, 
            Organization organization) {
        initComponents();
        this.container = container;
        this.userAccount = account;
        this.organization = organization;
        populateTable();
    }
    
    private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tblBloodRequests.getModel();
        model.setRowCount(0);
        
        for(WorkRequest request : organization.getWorkRequestList().getWorkRequests()) {
            if(request instanceof BloodSupplyRequest) {
                BloodSupplyRequest br = (BloodSupplyRequest) request;
                Object[] row = new Object[6];
                row[0] = br;
                row[1] = br.getBloodType();
                row[2] = br.getQuantity();
                row[3] = br.isIsUrgent() ? "Urgent" : "Normal";
                row[4] = br.getStatus();
                row[5] = br.getRequiredByDate();
                model.addRow(row);
            }
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblBloodRequests = new javax.swing.JTable();
        btnProcess = new javax.swing.JButton();

        tblBloodRequests.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5", "Title 6"
            }
        ));
        jScrollPane1.setViewportView(tblBloodRequests);

        jScrollPane2.setViewportView(jScrollPane1);

        btnProcess.setText("Process Request ");
        btnProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnProcessActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(34, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 657, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(35, 35, 35))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(btnProcess)
                        .addGap(44, 44, 44))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(107, 107, 107)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnProcess)
                .addContainerGap(161, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnProcessActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblBloodRequests.getSelectedRow();
        if(selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a request");
            return;
        }
        
        BloodSupplyRequest request = (BloodSupplyRequest)
            tblBloodRequests.getValueAt(selectedRow, 0);
            
        request.setStatus("Processing");
        request.setTemperature(4.0);
        request.setStorageRequirements("Standard Blood Storage Protocol");
        
        populateTable();
        JOptionPane.showMessageDialog(null, "Blood request processing initiated");
    }//GEN-LAST:event_btnProcessActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnProcess;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblBloodRequests;
    // End of variables declaration//GEN-END:variables
}
