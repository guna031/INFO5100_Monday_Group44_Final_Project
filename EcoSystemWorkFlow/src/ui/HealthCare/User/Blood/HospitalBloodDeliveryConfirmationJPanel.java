/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui.HealthCare.User.Blood;

import ecosystemworkflow.Organization.Organization;
import ecosystemworkflow.UserAccount.UserAccount;
import ecosystemworkflow.WorkFlow.TransportOrganizationRequest;
import ecosystemworkflow.WorkFlow.WorkRequest;
import java.util.Date;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author gunav
 */
public class HospitalBloodDeliveryConfirmationJPanel extends javax.swing.JPanel {

    /**
     * Creates new form HospitalBloodDeliveryConfirmationJPanel
     */
    private UserAccount userAccount;
    private Organization organization;
    private JPanel container;
    
    public HospitalBloodDeliveryConfirmationJPanel(JPanel container, UserAccount account, 
            Organization organization) {
        initComponents();
        this.container = container;
        this.userAccount = account;
        this.organization = organization;
        populateTable();
    }
    
     private void populateTable() {
        DefaultTableModel model = (DefaultTableModel) tblDeliveries.getModel();
        model.setRowCount(0);
        
        for(WorkRequest request : organization.getWorkRequestList().getWorkRequests()) {
            if(request instanceof TransportOrganizationRequest) {
                TransportOrganizationRequest tr = (TransportOrganizationRequest) request;
                if(tr.getItemType().equals("Blood") && tr.getStatus().equals("Delivered")) {
                    Object[] row = new Object[6];
                    row[0] = tr;
                    row[1] = tr.getItemType();
                    row[2] = tr.getQuantity();
                    row[3] = tr.getDeliveryTime();
                    row[4] = tr.isRequiresRefrigeration();
                    model.addRow(row);
                }
            }
        }
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane2 = new javax.swing.JScrollPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDeliveries = new javax.swing.JTable();
        btnDelivery = new javax.swing.JButton();

        tblDeliveries.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4", "Title 5"
            }
        ));
        jScrollPane1.setViewportView(tblDeliveries);

        jScrollPane2.setViewportView(jScrollPane1);

        btnDelivery.setText("Confirm Delivery");
        btnDelivery.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeliveryActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 696, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(124, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnDelivery)
                .addGap(155, 155, 155))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(126, 126, 126)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnDelivery)
                .addContainerGap(228, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnDeliveryActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeliveryActionPerformed
        // TODO add your handling code here:
        int selectedRow = tblDeliveries.getSelectedRow();
        if(selectedRow < 0) {
            JOptionPane.showMessageDialog(null, "Please select a delivery");
            return;
        }
        
        TransportOrganizationRequest request = (TransportOrganizationRequest)
            tblDeliveries.getValueAt(selectedRow, 0);
            
        request.setStatus("Received");
        request.setDateOfResolving(new Date());
        
        populateTable();
        JOptionPane.showMessageDialog(null, "Blood delivery confirmed");
    }//GEN-LAST:event_btnDeliveryActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnDelivery;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tblDeliveries;
    // End of variables declaration//GEN-END:variables
}
